#+STARTIP: overview
** Interface tweeks 
#+BEGIN_SRC emacs-lisp
(setq user-emacs-directory (file-truename "~/.emacs.d/"))

(setq inhibit-startup-message t)
(setq visible-bell 1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(menu-bar-mode -1)

(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(setq org-startup-truncated nil)
(global-visual-line-mode t)
;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)
;; turn on line numbers
(global-display-line-numbers-mode)

#+END_SRC
place on backups in one location to remove annoying files everywhere
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC
** Custom Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-m") 'compile)
#+END_SRC
** Org-Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC 
** Ace-Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC
** Colour-Themes
#+BEGIN_SRC emacs-lisp
(use-package modus-vivendi-theme
  :ensure t)
(use-package modus-operandi-theme
  :ensure t)
#+END_SRC
** Centered Window
#+BEGIN_SRC emacs-lisp
(use-package centered-window
  :ensure t)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (progn
  (bind-key "C-x g" 'magit-status)
  ))
#+END_SRC
** Auto-Complete
   Enable auto-complete globally
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t)

(global-auto-complete-mode t)
#+END_SRC
** Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
** My functions
   define the location of the init file, and a function to quickly open it. As well as a similar function to open Org directory
#+BEGIN_SRC emacs-lisp

(defun open-config ()
  (defvar config "~/.emacs.d/")
  (interactive)
  (find-file config))

(defun open-org ()
  (defvar org "~/.org/")
  (interactive)
  (find-file org))
#+END_SRC
** C++ 
#+BEGIN_SRC emacs-lisp
(defun my-c++-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)

(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC
